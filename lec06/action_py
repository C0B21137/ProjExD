import pygame as pg
import time
import sys
from random import randint
import tkinter as tk
import tkinter.messagebox as tkm


a=0 #ジャンプ時の重力
jmp=False #ジャンプできるかどうかの判定

def music(): #音楽再生
    pg.mixer.init(frequency = 44100)    # 初期設定
    pg.mixer.music.load("sample.wav")     # 音楽ファイルの読み込み
    pg.mixer.music.play(1)              # 音楽の再生回数(1回)
    pg.mixer.music.stop()               # 再生の終了


def check_jump(tori): # こうかとんが地面にいるかどうかの判定
    global jmp
    if tori.centery==385:
        jmp=True


def jump(): #ジャンプする関数
    global jmp,a
    jmp=False
    a=-10

def check_bound(obj_rect): #ステージ外に出ないようにする関数
    yoko,tate=+1,+1
    if obj_rect.centerx<38:
        yoko=-1
    if 762<obj_rect.centerx:
        yoko=-1
    if obj_rect.centery<355:
        tate=-1
    return yoko,tate


def main():
    root=tk.Tk()
    root.withdraw()
    pg.display.set_caption("こうかとんのアクション") #画面表示
    scrn_sfc=pg.display.set_mode((800,480))
    scrn_rct=scrn_sfc.get_rect()

    bg_sfc=pg.image.load("fig/action.png") #背景画像
    bg_rect=bg_sfc.get_rect()

    tori_sfc=pg.image.load("fig/0.png") #こうかとんの表示
    tori_sfc=pg.transform.rotozoom(tori_sfc,0,2.0)
    tori_rct=tori_sfc.get_rect()
    tori_rct.center=38,355

    # block_sfc=pg.surface((30,30)) #ブロックの表示
    # block_sfc.set_colorkey((0,0,0))
    # pg.draw.rect(block_sfc,(255,0,0),10)
    # block_rct=block_sfc.get_rct()
    # block_rct.centerx=randint(0,scrn_rct.width)
    # block_rct.centery=randint(0,scrn_rct.height)

    clock=pg.time.Clock()

    while True:
        scrn_sfc.blit(bg_sfc,bg_rect)
        # scrn_sfc.blit(block_sfc,block_rect)

        key_states=pg.key.get_pressed()

        if key_states[pg.K_UP]: #こうかとんの移動
            tori_rct.centery-=1
        if key_states[pg.K_LEFT]:
            tori_rct.centerx-=1
        if key_states[pg.K_RIGHT]:
            tori_rct.centerx+=1
        
        # yoko,tate=check_bound(tori_rct)

        # if yoko==-1 : # こうかとんがステージ外に出た時の処理
        #     if key_states[pg.K_LEFT]:
        #         tori_rct.centerx+=1
        #     if key_states[pg.K_RIGHT]:
        #         tori_rct.centerx-=1
        # if tate==-1:
        #     if key_states[pg.K_UP]:
        #         tori_rct.centery+=1

        check_jump(tori_rct)
        if jmp==True:
            jump()
        scrn_sfc.blit(tori_sfc,tori_rct)

        pg.display.update()
        clock.tick(1000)

        for event in pg.event.get():
            if event.type==pg.QUIT:
                return



if __name__ == "__main__":
    pg.init() #初期化
    main() #ゲームの本体
    music() # 音楽の再生
    pg.quit() #初期化の解除
    sys.exit()